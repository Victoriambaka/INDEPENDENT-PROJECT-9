# -*- coding: utf-8 -*-
"""INDEPENDENT PROJECT WEEK 9

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZF6TylomeyoPeI-r4zLyQCSo--nwcE8r

# **INDEPENDENT PROJECT 9: Investigation of usage of blue-cars in Paris for the Autolib Company**

## Research question
Working as a data scientist for the Autolib electric car-sharing service company, we are tasked to investigate the following claim about the usage of blue-car(a category of electric cars) in Paris. 

> *  Investigate the claim that the mean of the number of blue cars taken in any 2 sets of random sample stations is 120 


Here is the data report link (https://docs.google.com/document/d/1QtRw-uAR2f9Irye3DUnTEFhpy0MZAxfZw7xfd0lAk_o/edit?usp=sharing)

### Metric for Success
*    The metric for success is being able to give satisfactory information that answers the research requirement stated above.

## Experiment design


*    Data Cleaning
*    Exploratory Data Analysis
*    Univariate, Bivariate Analysis
*    Visualizations
*    Testing a Hypothesis
*    Challenge our solution by providing insights on how we can make improvements.

## 2. Reading the Data
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Loading the Data from the source i.e. csv
# ---
data = '/content/autolib_daily_events_postal_code.csv'
# ---
# 
pariscars = pd.read_csv(data)

"""## 3. Checking the Data"""

# Determining the no. of records in our dataset
#
pariscars.shape

# Previewing the top of our dataset
#
pariscars.head()

# Previewing the bottom of our dataset
# 
pariscars.tail()

# Checking whether each column has an appropriate datatype
#
pariscars.dtypes

# Checking the unique values of the columns we are interested in
# the day of the week
pariscars['dayOfWeek'].unique()

pariscars['day_type'].unique()

# Postal codes(which will later be translated into stations)
pariscars['Postal code'].unique()

"""## 5. Tidying the Dataset"""

# Checking for Outliers in the column of interest.
fig, (ax1) = plt.subplots(1, figsize=(10, 7))
sns.boxplot(pariscars['BlueCars_taken_sum'], ax=ax1)

fig.suptitle('Boxplot')
plt.show()
# There are too many outliers outliers
# For now we will not drop them because they are valid observations and form a significant proportion of the data.

# Checking for Anomalies
#
pariscars.duplicated().sum()
# no duplicates

# Identifying the Missing Data
#
pariscars.isnull().sum()
# no missing values

# More data cleaning procedures
# Removing unnecessary columns
pariscars = pariscars.drop('n_daily_data_points', axis = 1)
pariscars = pariscars.drop('date', axis = 1)
pariscars = pariscars.drop('BlueCars_returned_sum', axis = 1)
pariscars = pariscars.drop('Utilib_taken_sum', axis = 1)
pariscars = pariscars.drop('Utilib_returned_sum', axis = 1)
pariscars = pariscars.drop('Utilib_14_taken_sum', axis = 1)
pariscars = pariscars.drop('Utilib_14_returned_sum', axis = 1)
pariscars = pariscars.drop('Slots_freed_sum', axis = 1)
pariscars = pariscars.drop('Slots_taken_sum', axis = 1)
pariscars.head()

# remaning the columns.
columns = ['postal_code', 'day_of_week', 'day_type', 'BC_taken']
pariscars.columns = columns
pariscars.head()

# At this point we need to understand our sample in order to work further. 
# We need a random sample of blue cars borrowed 

# We will use simple random sampling

# Sample Size formula for a known population.

# Sample Size n = N * [Z**2 * p * (1-p)/e**2] / [N – 1 + (Z**2 * p * (1-p)/e**2]

# N = Population size,
# Z = Critical value of the normal distribution at the required confidence level,
# p = Sample proportion,
# e = Margin of error

N = 16085
Z = 1.96 # alpha = 0.05
p = 0.5
e = 0.05

nu = (1.96** 2)*0.5*(1-0.5)/(0.05**2)
den = (16085 - 1) + nu

n = N * (nu/den)
print(n)

# Sample size = 375.

# Finding means and standard deviations of the population of taken blue cars.
mu = pariscars['BC_taken'].mean()
print(mu)

sigma = pariscars['BC_taken'].std()
print(sigma)

# Selecting our sample
sample = (pariscars['BC_taken']).sample(n = 375, replace="False")
print(sample)

sampling = pd.DataFrame(sample)
sampling.head()

x̄ = sampling['BC_taken'].mean()
print(x̄)

"""## 6. Exploratory Analysis

## Univariate analysis
"""

pariscars.describe()

days = pariscars.day_of_week.value_counts()
days

# accessing the data to plot

# labels
sizes= days.index
sizes

# values
data = days.values
data

# plotting
plt.figure(figsize = (7,7), dpi = 100)
plt.bar(sizes, data, color = 'grey')
plt.ylabel("Day of week")
plt.xlabel('Frequency')
plt.title("A Bar chart of days of week frequencies", color = 'blue')
plt.show()
# 0 = Monday
# 1 = Tuesday
# 2 = Wednesday
# 3 = Thursday
# 4 = Friday
# 5 = Saturday
# 6 = Sunday

# The day with the most number of Bluecar borrowings is Monday.

# Histogram of the daytype sum

plt.figure(dpi = 100)
sns.set_style('darkgrid')
sns.countplot(pariscars.day_type)
plt.title('A Bar chart of the day type ', color = 'blue')
plt.show()



# the histogram shows us that the blue cars taken distribution is skewed to the right
# this is because the tail is long to the right hand side

# Histogram of the bluecars_taken sum

plt.figure(dpi = 140)
sns.set_style("darkgrid")
sns.distplot(pariscars["BC_taken"], kde = False, color = 'maroon')
plt.title("A Histogram of number of bluecars taken", color = 'blue')
plt.xticks(rotation = 45)
plt.show()



# the histogram shows us that the blue cars taken distribution is skewed to the right
# this is because the tail is long to the right hand side

pariscars.groupby('day_of_week')[['BC_taken']].count()

"""## Bivariate analysis"""

# Scatterplot showing relation between day being Monday and more than 120 cars being taken
plt.figure(dpi = 100)

# plotting our scatterplot using matplotlib
plt.scatter(pariscars['BC_taken'] > 120, pariscars['day_of_week'] == 0)

# Giving the scatterplot a title
plt.title('A scatter plot of Bluecars taken vs day of week', color = 'blue')

# Labelling the x axis
plt.xlabel('BC_taken')

# Labelling the y axis
plt.ylabel('Day of week')

# We then display our scatterplot 
plt.show()

# Calculating correlation of day of the week being Monday and the car taken.
day_vs_cars_corr = (pariscars['day_of_week'] == 0).corr(pariscars['BC_taken'] > 120, method = 'pearson')
print(day_vs_cars_corr)
# There is almost no correlation although it is slightly to the negative but very weakly.

# Scatterplot showing relation between day being Tuesday and more than 120 cars being taken
plt.figure(dpi = 100)

# plotting our scatterplot using matplotlib
plt.scatter(pariscars['BC_taken'] > 120, pariscars['day_of_week'])

# Giving the scatterplot a title
plt.title('A scatter plot of 120+ Bluecars taken vs day of week', color = 'blue')

# Labelling the x axis
plt.xlabel('BC_taken')

# Labelling the y axis
plt.ylabel('Day of week')

# We then display our scatterplot 
plt.show()

# Calculating correlation of day of the week being Tuesday and the car taken.
day_vs_cars_corr1 = (pariscars['day_of_week'] == 1).corr(pariscars['BC_taken'] > 120, method = 'pearson')
print(day_vs_cars_corr1)
# There is almost no correlation although it is slightly to the negative but very weakly.

# Scatterplot showing relation between day being Wednesday and more than 120 cars being taken
plt.figure(dpi = 100)

# plotting our scatterplot using matplotlib
plt.scatter(pariscars['BC_taken'] > 120, pariscars['day_of_week'] ==2)

# Giving the scatterplot a title
plt.title('A scatter plot of Bluecars taken vs Wednesday', color = 'blue')

# Labelling the x axis
plt.xlabel('BC_taken')

# Labelling the y axis
plt.ylabel('Day of week')

# We then display our scatterplot 
plt.show()

# Calculating correlation of day of the week being Wednesday and the car taken.
day_vs_cars_corr2 = (pariscars['day_of_week'] == 2).corr(pariscars['BC_taken'] > 120, method = 'pearson')
print(day_vs_cars_corr2)
# There is almost no correlation although it is slightly to the negative but very weakly.

# Scatterplot showing relation between day being Thurday and more than 120 cars being taken
plt.figure(dpi = 100)

# plotting our scatterplot using matplotlib
plt.scatter(pariscars['BC_taken'] > 120, pariscars['day_of_week'] == 3)

# Giving the scatterplot a title
plt.title('A scatter plot of Bluecars taken vs day of week', color = 'blue')

# Labelling the x axis
plt.xlabel('BC_taken')

# Labelling the y axis
plt.ylabel('Day of week')

# We then display our scatterplot 
plt.show()

# Calculating correlation of day of the week being Thursday and the car taken.
day_vs_cars_corr3 = (pariscars['day_of_week'] == 3).corr(pariscars['BC_taken'] > 120, method = 'pearson')
print(day_vs_cars_corr3)
# There is almost no correlation although it is slightly to the negative but very weakly.

# Scatterplot showing relation between day being Friday and more than 120 cars being taken
plt.figure(dpi = 100)

# plotting our scatterplot using matplotlib
plt.scatter(pariscars['BC_taken'] > 120, pariscars['day_of_week'] == 4)

# Giving the scatterplot a title
plt.title('A scatter plot of Bluecars taken vs Friday', color = 'blue')

# Labelling the x axis
plt.xlabel('BC_taken')

# Labelling the y axis
plt.ylabel('Day of week')

# We then display our scatterplot 
plt.show()

# Calculating correlation of day of the week being Friday and the car taken.
day_vs_cars_corr4 = (pariscars['day_of_week'] == 4).corr(pariscars['BC_taken'] > 120, method = 'pearson')
print(day_vs_cars_corr4)
# There is almost no correlation although it is slightly to the positive but very weakly.

# Scatterplot showing relation between day being Saturday and more than 120 cars being taken
plt.figure(dpi = 100)

# plotting our scatterplot using matplotlib
plt.scatter(pariscars['BC_taken'] > 120, pariscars['day_of_week'] == 5)

# Giving the scatterplot a title
plt.title('A scatter plot of Bluecars taken vs Saturday', color = 'blue')

# Labelling the x axis
plt.xlabel('BC_taken')

# Labelling the y axis
plt.ylabel('Day of week')

# We then display our scatterplot 
plt.show()

# Calculating correlation of day of the week being Saturday and the car taken.
day_vs_cars_corr5 = (pariscars['day_of_week'] == 5).corr(pariscars['BC_taken'] > 120, method = 'pearson')
print(day_vs_cars_corr5)
# There is almost no correlation although it is slightly to the positive but very weakly.

# Scatterplot showing relation between day being Sunday and more than 120 cars being taken
plt.figure(dpi = 100)

# plotting our scatterplot using matplotlib
plt.scatter(pariscars['BC_taken'] > 120, pariscars['day_of_week'] == 6)

# Giving the scatterplot a title
plt.title('A scatter plot of Bluecars taken vs Sunday', color = 'blue')

# Labelling the x axis
plt.xlabel('BC_taken')

# Labelling the y axis
plt.ylabel('Day of week')

# We then display our scatterplot 
plt.show()

# Calculating correlation of day of the week being Sunday and the car taken.
day_vs_cars_corr6 = (pariscars['day_of_week'] == 6).corr(pariscars['BC_taken'] > 120, method = 'pearson')
print(day_vs_cars_corr6)
# There is almost no correlation although it is slightly to the positive but very weakly.

"""*    Sunday, Saturday and Friday are the only days of the week that show a positive correlation with borrowed cars being above 120"""

# # Scatterplot showing relation between daytype being weekday and more than 120 cars being taken

sns.scatterplot(x = pariscars['day_type'] == 1, y = pariscars['BC_taken'] > 120)

# # Scatterplot showing relation between daytype being weekend and more than 120 cars being taken

sns.scatterplot(x = pariscars['day_type'] == 2, y = pariscars['BC_taken'] > 120)

sns.scatterplot(x = pariscars['postal_code'], y = pariscars['BC_taken'] > 120)

# heatmap, showing a picture of how the features correlate. 
# Positive values indicate a positive correlation and vice versa.
sns.heatmap(pariscars.corr(),annot=True)
plt.show()

"""## 7. Implementing the Solution"""

# Hypotheses

# Ho : the mean of borrowed blue cars is smaller or equal to 120
# H1 : the means of borrowed blue cars is greater than 120

from scipy import stats
from scipy.stats import norm
from scipy.stats import ttest_ind
# Importing anderson function form scipy   β, 
from scipy.stats import anderson

# Creating a function for calculating t and z scores.
def score (μ,x̄,σ,n):
    
    if n>30: # Calculating Z Test score
        score = (μ - x̄)/((σ)/(n**0.5))
        print(f"This is the Z - Test Statistic: {score}, and this is the P-value:")
        prob = stats.norm.cdf(score)
   
    else: # Calculating T Test score
        score = (μ - x̄)/((σ)/((n-1)**0.5))
        print(f"\nThis is the T - Test Statistic: {score}, and this is the P-value:")
        pro = stats.norm.cdf(score)
        prob = (1 - pro)

    # prob = stats.norm.cdf(score)
    
    return prob

# t Test for Hypothesis of the Mean of the sample
#
# h0 :mean <= 120
# h1 > 120  (claim)

μ = 125.926951
x̄ = 137.7869
n = 375
σ = 185.42657876727893
alpha = 0.05

score(μ,x̄,σ,n)

# The p_value is 10% which is greater than the significance value 5%
# This leads us to fail to reject the null hypothesis

# Point estimation attempt
# Here we specify our abitrary mean height and a standard deviation, which are loc and scale respectively
estimation_ = sampling[loc=120, scale=150]
print(estimation)  

#Calculate the population mean
#estimation.mean()

sampling = np.array(sampling['BC_taken'])
print(sampling)

# Interval estimation

sample_mean = x̄
sample_mean

# Finding the sample size
#
sample_size = n
sample_size

# Finding the standard error of the mean of data 
#
std_error = sampling.std() / np.sqrt(n)
std_error

# Calculating the 95% Confidence Interval for mean data 
# To calculate the confidence interval, we will use the norm object from the statssubpackage. 
# The norm object has an interval() method that receives three inputs 
# – our chosen confidence interval 0.95, and the sample mean and standard error of the mean.  
# 
stats.norm.interval(0.95, loc=sample_mean, scale=std_error)

# 120.2311 < mu < 155.3425

"""## 9. Follow up questions

### a). Did we have the right data?
*     Yes

### b). Do we need other data to answer our question?

*   No, this dataset has given us enough data with regard to the research question

### c). Did we have the right question?
*    Yes. It was a suitable and valid question.
"""